basePath: /
definitions:
  logIn.RefreshToken:
    properties:
      refresh:
        type: string
    type: object
  models.LogInUser:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LogUpUser:
    properties:
      age:
        type: integer
      email:
        type: string
      name:
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
      role_token:
        type: string
      roles:
        type: string
    required:
    - age
    - email
    - name
    - password
    type: object
  models.To:
    properties:
      email:
        description: Email получателя
        type: string
    type: object
  models.User:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      roles:
        type: string
    type: object
  models.СhangeData:
    properties:
      code:
        type: string
      email:
        type: string
      newPassword:
        type: string
    type: object
host: localhost:8088
info:
  contact: {}
  description: API для медицинского приложения
  title: API для медицинского приложения
  version: "1.0"
paths:
  /admin/delete/user/:id:
    delete:
      consumes:
      - application/json
      description: Удаляет пользователя из базы данных по указанному ID (доступно
        только для роли admin)
      parameters:
      - description: ID пользователя для удаления
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешное удаление пользователя
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'Доступ запрещён: отсутствует или неверный токен авторизации'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'Доступ запрещён: недостаточно прав (требуется роль admin)'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера (например, ошибка базы данных)
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Удаление пользователя
      tags:
      - Пользователи
  /admin/users:
    get:
      consumes:
      - application/json
      description: Возвращает список всех пользователей из базы данных (доступно только
        для роли admin)
      produces:
      - application/json
      responses:
        "200":
          description: Список пользователей
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.User'
              type: array
            type: object
        "401":
          description: 'Доступ запрещён: отсутствует или неверный токен авторизации'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'Доступ запрещён: недостаточно прав (требуется роль admin)'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера (например, ошибка базы данных)
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Получение списка всех пользователей
      tags:
      - Пользователи
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Возвращает список пользователей с фильтрацией по age, email, role
        и пагинацией (доступно только для роли admin)
      parameters:
      - description: Возраст пользователя для фильтрации
        in: query
        name: age
        type: string
      - description: Email пользователя для фильтрации
        in: query
        name: email
        type: string
      - description: Роль пользователя для фильтрации
        in: query
        name: role
        type: string
      - description: Лимит записей (по умолчанию 10)
        in: query
        name: limit
        type: string
      - description: Смещение для пагинации (по умолчанию 0)
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список отфильтрованных пользователей
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Неверные параметры запроса (limit или offset)
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'Доступ запрещён: отсутствует или неверный токен авторизации'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'Доступ запрещён: недостаточно прав (требуется роль admin)'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователи не найдены
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера (например, ошибка базы данных)
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Получение отфильтрованного списка пользователей
      tags:
      - Пользователи
  /changePassword:
    post:
      consumes:
      - application/json
      description: Изменяет пароль пользователя на основе email, кода (отправленного
        на email) и нового пароля
      parameters:
      - description: Данные для изменения пароля (email, code, newPassword)
        in: body
        name: changeData
        required: true
        schema:
          $ref: '#/definitions/models.%D0%A1hangeData'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное изменение пароля
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный формат запроса или неверный код
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера (например, ошибка базы данных, Redis
            или хеширования пароля)
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Изменение пароля пользователя
      tags:
      - Аутентификация
  /login:
    post:
      consumes:
      - application/json
      description: Выполняет авторизацию пользователя на основе email и пароля, возвращает
        токены доступа и обновления
      parameters:
      - description: Данные для входа (email, password)
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LogInUser'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная авторизация с токенами доступа и обновления
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный формат запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неверный email или пароль
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера (например, ошибка базы данных или
            генерации токенов)
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Вход пользователя
      tags:
      - Аутентификация
  /logup:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя в системе на основе предоставленных
        данных (email, пароль, роль)
      parameters:
      - description: Данные для регистрации пользователя (email, password, RoleToken)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LogUpUser'
      produces:
      - application/json
      responses:
        "201":
          description: Успешная регистрация (пустой ответ)
        "400":
          description: Неверный формат запроса или данные
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Пользователь с таким email уже зарегистрирован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера (например, ошибка базы данных или
            хеширования пароля)
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Регистрация нового пользователя
      tags:
      - Аутентификация
  /refresh:
    post:
      consumes:
      - application/json
      description: Обновляет токен доступа, используя предоставленный refresh-токен,
        и возвращает новый токен доступа
      parameters:
      - description: Refresh-токен для обновления доступа
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/logIn.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное обновление с новым токеном доступа
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный формат запроса или отсутствует refresh-токен
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неверный или просроченный refresh-токен
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера (например, ошибка генерации токена)
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновление токена доступа
      tags:
      - Аутентификация
  /sendEmailCode:
    post:
      consumes:
      - application/json
      description: Отправляет пользователю уникальный код для восстановления пароля
        на указанный email
      parameters:
      - description: Email пользователя для отправки кода
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/models.To'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная отправка кода с ID отправленного сообщения
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Неверный формат запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь с указанным email не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера (например, ошибка базы данных, API
            email или Redis)
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Отправка кода для восстановления пароля
      tags:
      - Аутентификация
securityDefinitions:
  ApiKeyAuth:
    description: Bearer токен авторизации (например, "Bearer <token>")
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
